service: tenants

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  profile: DevSandbox
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: 90
  tracing:
    lambda: true
  apiGateway:
    restApiId: !ImportValue ApiGatewayRestApiId-${sls:stage}
    restApiRootResourceId: !ImportValue ApiGatewayRootResourceId-${sls:stage}
  environment:
    STAGE: ${sls:stage}
    ENABLE_LOGS: true
    TENANTS_TABLE: Tenants-${self:provider.stage}
    TOKEN_SECRET: ${ssm:/aws/reference/secretsmanager/JwtSecret}
    CORS_HEADERS: >
      {
        "Access-Control-Allow-Origin": "*",
        "Access-Control-Allow-Headers": "Content-Type, Authorization",
        "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS"
      }
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - !Sub "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Tenants-${self:provider.stage}"
        - !Sub "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Tenants-${self:provider.stage}/index/UsernameIndex"
        - !Sub "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/Tenants-${self:provider.stage}/index/TenantIndex"

    - Effect: "Allow"
      Action:
        - lambda:InvokeFunction
      Resource: !ImportValue AuthorizerLambdaArn-${sls:stage}

custom:
  awsLayerVersion: 4
  AwsLayerArn: arn:aws:lambda:us-east-1:${aws:accountId}:layer:awsLayer:${self:custom.awsLayerVersion}
  utilsLayerVersion: 3
  UtilsLayerArn: arn:aws:lambda:us-east-1:${aws:accountId}:layer:utilsLayer:${self:custom.utilsLayerVersion}
  AuthorizerLambdaArn: !ImportValue AuthorizerLambdaArn-${sls:stage}
  ApiGatewayAuthorizerId: !ImportValue ApiGatewayAuthorizerId-${sls:stage}

functions:
  createTenant:
    handler: stacks/tenants/lambdas/create.handler
    layers:
      - ${self:custom.AwsLayerArn}
      - ${self:custom.UtilsLayerArn}
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: tenants
          method: post
          cors: true
          authorizer:
            type: TOKEN
            authorizerId: ${self:custom.ApiGatewayAuthorizerId}
            identitySource: method.request.header.Authorization

  updateTenant:
    handler: stacks/tenants/lambdas/update.handler
    layers:
      - ${self:custom.AwsLayerArn}
      - ${self:custom.UtilsLayerArn}
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: tenants
          method: put
          cors: true
          authorizer:
            type: TOKEN
            authorizerId: ${self:custom.ApiGatewayAuthorizerId}
            identitySource: method.request.header.Authorization

  listTenants:
    handler: stacks/tenants/get.handler
    layers:
      - ${self:custom.AwsLayerArn}
      - ${self:custom.UtilsLayerArn}
    memorySize: 256
    timeout: 10
    events:
      - http:
          path: tenants
          method: get
          cors: true
          authorizer:
            type: TOKEN
            authorizerId: ${self:custom.ApiGatewayAuthorizerId}
            identitySource: method.request.header.Authorization
